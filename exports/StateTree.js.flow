/**
 * Flowtype definitions for StateTree
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 * @flow
 */

import { StateNode } from "./StateNode";
import {
  StateValue,
  EntryExitStateArrays,
  EventType,
  EventObject
} from "./types";
export interface StateTreeOptions {
  resolved?: boolean;
}
declare export class StateTree {
  stateNode: StateNode;
  stateValue: StateValue | void;
  parent: StateTree | void;
  nodes: Record<string, StateTree>;
  isResolved: boolean;
  constructor(
    stateNode: StateNode,
    stateValue: StateValue | void,
    options?: StateTreeOptions
  ): this;
  done: boolean;
  getDoneData<TContext>(context: TContext, event: EventObject): any;
  atomicNodes: StateNode[];
  getDoneEvents(entryStateNodes?: Set<StateNode>): EventObject[];
  resolved: StateTree;
  paths: string[][];
  absolute: StateTree;
  nextEvents: EventType[];
  clone(): StateTree;
  combine(tree: StateTree): StateTree;
  value: StateValue;
  matches(parentValue: StateValue): boolean;
  getEntryExitStates(
    prevTree: StateTree,
    externalNodes?: Set<StateNode<any>>
  ): EntryExitStateArrays<any>;
  getEntryStates(): StateNode[];
  getExitStates(): StateNode[];
}
