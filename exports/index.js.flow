/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 * @flow
 */

import { matchesState } from "./utils";
import { mapState } from "./mapState";
import { StateNode } from "./StateNode";
import { State } from "./State";
import { Machine } from "./Machine";
import {
  raise,
  send,
  sendParent,
  log,
  start,
  stop,
  assign,
  after,
  done
} from "./actions";
import { interpret, Interpreter } from "./interpreter";
import { matchState } from "./match";
declare var actions: {
  raise: typeof raise,
  send: typeof send,
  sendParent: typeof sendParent,
  log: typeof log,
  cancel: (sendId: string | number) => $Exports<"./types">,
  start: typeof start,
  stop: typeof stop,
  assign: <TContext, TEvent: $Exports<"./types">>(
    assignment:
      | $Exports<"./types">
      | $Shape<
          $ObjMapi<
            TContext,
            <K>(
              K
            ) =>
              | ((
                  context: TContext,
                  event: TEvent
                ) => $ElementType<TContext, K>)
              | $ElementType<TContext, K>
          >
        >
  ) => $Exports<"./types">,
  after: typeof after,
  done: typeof done
};
declare export {
  Machine,
  StateNode,
  State,
  matchesState,
  mapState,
  actions,
  assign,
  send,
  sendParent,
  interpret,
  Interpreter,
  matchState
};
declare export * from "./types"
