/**
 * Flowtype definitions for match
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 * @flow
 */

import { State } from "./State";
import { StateValue, EventObject } from "./types";
export type ValueFromStateGetter<T, TContext, TEvent: EventObject> = (
  state: State<TContext, TEvent>
) => T;
export type StatePatternTuple<T, TContext, TEvent: EventObject> = [
  StateValue,
  ValueFromStateGetter<T, TContext, TEvent>
];
declare export function matchState<T, TContext, TEvent: EventObject>(
  state: State<TContext, TEvent> | StateValue,
  patterns: Array<StatePatternTuple<T, TContext, TEvent>>,
  defaultValue: ValueFromStateGetter<T, TContext, TEvent>
): T;
