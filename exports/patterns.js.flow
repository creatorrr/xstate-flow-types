/**
 * Flowtype definitions for patterns
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 * @flow
 */

import {
  AtomicStateNodeConfig,
  StatesConfig,
  Event,
  EventObject,
  StateSchema
} from "./types";
declare export function toggle<TEventType: string>(
  onState: string,
  offState: string,
  eventType: TEventType
): Record<
  string,
  AtomicStateNodeConfig<
    any,
    {
      type: TEventType
    }
  >
>;
declare interface SequencePatternOptions<TEvent: EventObject> {
  nextEvent: Event<TEvent> | void;
  prevEvent: Event<TEvent> | void;
}
declare export function sequence<
  TStateSchema: StateSchema,
  TEvent: EventObject
>(
  items: string[],
  options?: $Shape<SequencePatternOptions<TEvent>>
): {
  initial: $Keys<$PropertyType<TStateSchema, "states">>,
  states: StatesConfig<any, TStateSchema, TEvent>
};
declare export {};
